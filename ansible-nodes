#!/bin/bash

TXTRED=$(tput setaf 1)
TXTGREEN=$(tput setaf 2)
TXTYELLOW=$(tput setaf 3)
TXTBLUE=$(tput setaf 4)
TXTBOLD=$(tput bold)
TXTNORMAL=$(tput sgr0)

DEFAULT_IMAGE='mabihan/ansible-node:latest'
    
function display_message {
    MSG="$1"
    STATE="$2"
    if [[ "$2" == "0" ]]; then
        DISPLAY="[${TXTBOLD}${TXTGREEN}OK${TXTNORMAL}] - $MSG"
    else
        DISPLAY="[${TXTBOLD}${TXTRED}KO${TXTNORMAL}] - $MSG"
    fi
    echo -e "${DISPLAY}"
}

function is_binary_present {
    which $1 >/dev/null 2>&1
    if [[ "$?" != "0" ]]; then
        echo "Command $1 is missing"
        exit 1
     fi
}

function stop_containers {
    for container in ansible node1 node2 node3; do
        if container_exists $container; then
            docker stop $container >/dev/null 2>&1
            display_message "Stop $container" $?
        fi
    done
}

function create_network {
    network_name=$1
    network_subnet=$2
    docker network inspect ${network_name} >/dev/null 2>&1
    if [[ "$?" != "0" ]]; then
        docker network create --subnet="${network_subnet}" "${network_name}" >/dev/null 2>&1
        display_message "Setting up network $network_name" $?
    else
        display_message "Network ${network_name} already exist" 0
    fi
}

function create_container {
    container_name=$1
    container_ip=$2
    container_image=$3
    container_id="$(docker ps -a -q -f name=${container_name})"
    if [[ $container_id == "" ]]; then
        docker run -d -h "${container_name}" --name "${container_name}" --net poppernetwork --ip "${container_ip}" --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro "${container_image}" >/dev/null 2>&1
        display_message "Creating $container_name - $2" $?
    else
        is_running=$(docker inspect -f '{{.State.Running}}' $container_id)
        if [[ "$is_running" == "false" ]]; then
            docker start ${container_id} >/dev/null 2>&1
            display_message "Starting up $container_name" $?
        else
            display_message "Container ${container_name} already exist" 0
        fi
    fi
}

function list {
    NUMBER=$(docker ps --format '{{.Names}}\t{{.Image}}' | grep node | wc -l);
    if [[ "$NUMBER" == "0" ]]; then
        echo -e "${TXTBOLD}${TXTYELLOW}$NUMBER nodes found${TXTNORMAL}"
    else
        echo -e "${TXTBOLD}${TXTGREEN}$NUMBER nodes found${TXTNORMAL}"
        docker ps --format '{{.Names}}\t{{.Image}}' | grep node
    fi
}

function container_exists {
    container_name=$1
    container_id=$(docker ps -a -q -f name=${container_name})
    if [[ $container_id == "" ]]; then
        return 1
    else
        return 0
    fi
}

function download_images {
    IMAGE=$(docker image ls | grep $1)

    if [[ "$IMAGE" != "" ]]; then
        echo -e "[${TXTBOLD}${TXTGREEN}OK${TXTNORMAL}] - Nodes image already downloaded"
    else 
        docker pull $1 >/dev/null 2>&1
        RESULT=$?
        display_message "Nodes image downloaded" $RESULT

        if [[ "$RESULT" != "" ]]; then
            exit 1
        fi
    fi
}

function delete_containers {

    if [ -f "/etc/ansible/inventory/docker-nodes.inventory" ]
    then 
        rm /etc/ansible/inventory/docker-nodes.inventory
        display_message "Delete ansible inventory file" $?
    fi 
    
    for i in $(eval echo "{0..25}"); do
        if container_exists node$i; then
            docker rm --force node$i >/dev/null 2>&1
            display_message "Delete node$i" $?
        fi
    done
    NETWORK=$(docker network ls | grep poppernetwork)
    if [[ "$NETWORK" != "" ]]; then
        docker network rm poppernetwork >/dev/null 2>&1
        display_message "Delete network" $?
    fi
}

function pop {
    IMAGE=$2
    if [ -z $IMAGE ]; then 
        IMAGE=$DEFAULT_IMAGE
    fi

    download_images $IMAGE
    create_network poppernetwork 10.0.101.0/24 

    for i in $(eval echo "{1..$1}") 
    do
        if [ "$i" -gt 25 ]
        then
            echo -e "[${TXTBOLD}${TXTYELLOW}!!${TXTNORMAL}] - 25 containers maximum"
            exit
        else
            create_container node$i 10.0.101.${i}0 $IMAGE
            create_user node$i
            echo "node$i ansible_host=10.0.101.${i}0 ansible_python_interpreter=/usr/bin/python3" >> /etc/ansible/inventory/docker-nodes.inventory
        fi
    done
}

function create_user {
    docker exec -it $1 adduser --disabled-password --gecos "" $USER >/dev/null
    docker exec -it $1 usermod -aG sudo $USER
    docker exec -i $1 /bin/bash -c 'mkdir -p /home/'$USER'/.ssh'
    cat ~/.ssh/id_rsa.pub |  docker exec -i $1 /bin/bash -c 'cat >> /home/'$USER'/.ssh/authorized_keys'
    docker exec -i $1 /bin/bash -c 'chown -R '$USER': /home/'$USER'/'
    echo "$USER ALL = (ALL) NOPASSWD: ALL" | docker exec -i $1 /bin/bash -c 'cat >> /etc/sudoers'

    IP_ADDRESS=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $1)
    ssh -q $IP_ADDRESS exit
    display_message "Deploying SSH key" $?
}

function attach_node {
    IP_ADDRESS=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $1)
    ssh $IP_ADDRESS
}

function show_title {
    echo -e "${TXTBOLD}${TXTBLUE}docker-nodes${TXTNORMAL}
    "
}

function show_description {

    echo -e "${TXTBOLD}${TXTYELLOW}Description:${TXTNORMAL}"
    echo "  A shell script used to deploy and manage local docker containers."
    echo -e "  Default image : ${TXTBOLD}${TXTBLUE}$DEFAULT_IMAGE${TXTNORMAL}
    "
}

function show_help {
    echo -e "${TXTBOLD}${TXTYELLOW}Usage:${TXTNORMAL}"
    echo "  ./docker-nodes [command] [options]
    "

    echo -e "${TXTBOLD}${TXTYELLOW}Available Commands:${TXTNORMAL}
  help        		Dispaly this message
  pop [n] [i]      	Deploy n containers using i image. 25 nodes maximum.
  attach [node]         Connect to a node shell
  list                  List containers managed by docker-nodes
  download    		Download dockers images
  delete      		Delete containers
  stop        		Exit and clean existing environnement"
}

is_binary_present docker

ACTION="$1"

if [[ -z "$ACTION" || "$ACTION" == "help" ]]; then
    show_description
    show_help
elif [[ "$ACTION" == "pop" ]]; then
    pop ${@:2}
elif [[ "$ACTION" == "attach" ]]; then
    attach_node $2
elif [[ "$ACTION" == "list" ]]; then
    list
elif [[ "$ACTION" == "delete" ]]; then
    delete_containers
elif [[ "$ACTION" == "stop" ]]; then
    stop_containers
elif [[ "$ACTION" == "download" ]]; then
    download_images
else
    echo -e "Error : $ACTION command is not supported\n"
    show_help
fi

exit 0
